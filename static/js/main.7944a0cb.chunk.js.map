{"version":3,"sources":["utils/utils.ts","components/MergingVisualizer/ArrayItem.tsx","components/MergingVisualizer/MergedArrayItem.tsx","components/MergingVisualizer/MergingVisualizer.tsx","algorithms/MergingSortedArrays.ts","algorithms/QuickSort.ts","components/SortingVisualizer/SortVisualizer.tsx","components/SortingVisualizer/QuickSort.tsx","algorithms/MergeSort.ts","components/SortingVisualizer/MergeSort.tsx","components/Header/Header.tsx","algorithms/InsertionSort.ts","components/SortingVisualizer/InsertionSort.tsx","algorithms/radixSort.ts","components/SortingVisualizer/RadixSort.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["random","min","max","Math","floor","createRandomArray","numOfElements","arr","i","push","createRandomArrayForMerge","sort","a","b","CreateRandomArrayForSort","sortAnimation","animations","disableButton","Promise","resolve","arrBars","Array","from","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","style","height","length","then","querySelectorAll","forEach","x","disabled","ArrayItem","array","className","map","item","index","MergedArrayItem","mergedArr","displayArray","setDisplayArray","setDisabled","delay","ms","useEffect","el","MergingVisualizer","useState","arrayOne","setArrayOne","arrayTwo","setArrayTwo","mergedArray","setMergedArray","onClick","arr1","arr2","temp","j","curr","isArr1Depleted","isArr2Depleted","mergeInSortedOrder","pop","undefined","mergeInSortedOrderWithNoDuplicate","swap","low","high","quickSort","pivot","partition","SortVisualizer","setArray","sortName","value","backgroundColor","QuickSort","getQuickSortAnimations","mergeSortHelper","start","end","auxArr","middle","mergeSort","k","MergeSort","slice","getMergeSortAnimations","Header","to","insertionSort","n","InsertionSort","getInsertionSortAnimation","getNum","num","strNum","String","foundNum","largestNum","largest","radixSort","maxLength","buckets","console","log","flat","RadixSort","getRadixSortAnimations","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7944a0cb.chunk.js","sourcesContent":["const random = (min: number, max: number) =>{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport const formatName = (name: string)=>{\n    const temp = name.replace('-', ' ').split(' ').map((x)=> x.charAt(0).toUpperCase() + x.substring(1)).join(' ');\n    return temp;\n}\n\nconst createRandomArray = (numOfElements: number, min: number, max: number ) => {\n    const arr: number[] = [];\n    for (let i = 0; i < numOfElements; i++) {\n      arr.push(random(min, max));\n    }\n    return arr;\n  };\n\nexport const createRandomArrayForMerge = () => {\n    return createRandomArray(21, 1, 20).sort((a, b) => a - b);\n  };\n\nexport const CreateRandomArrayForSort = () => {\n    return createRandomArray(108, 5, 400);\n  };\n// export const sortAnimation = (animations: any) => {\n//   for (let i = 0; i < animations.length; i++) {\n//     const arrBars = Array.from(\n//       document.getElementsByClassName(\n//         \"array-bar\"\n//       ) as HTMLCollectionOf<HTMLElement>\n//     );\n//     setTimeout(() => {\n//       const [barOneIdx, newHeight] = animations[i];\n//       const barOneStyle = arrBars[barOneIdx].style;\n//       barOneStyle.height = `${newHeight}px`;\n//     }, i * 10);\n//   }\n// };\nexport const sortAnimation = (animations: any) => {\n  disableButton();\n  return new Promise((resolve)=>{\n    for (let i = 0; i < animations.length; i++) {\n      const arrBars = Array.from(\n      document.getElementsByClassName(\n        \"array-bar\"\n      ) as HTMLCollectionOf<HTMLElement>\n    );\n    setTimeout(() => {\n      const [barOneIdx, newHeight] = animations[i];\n      const barOneStyle = arrBars[barOneIdx].style;\n      barOneStyle.height = `${newHeight}px`;\n    }, i * 10);\n  }\n  setTimeout(()=>{\n    resolve(true);\n  }, animations.length*10)\n  }).then(()=>{\n    disableButton();\n  })\n};\nconst disableButton = ()=>{\n  const btn = Array.from(document.querySelectorAll(\"button\"));\n  btn.forEach((x)=>{\n    if(x.disabled){\n      x.disabled=false;\n    }else{\n      x.disabled=true;\n    }\n  });\n}","import React from \"react\";\n\ninterface ArrayItemProps {\n  array: number[];\n}\n\nexport const ArrayItem: React.FC<ArrayItemProps> = ({ array }) => {\n  return (\n    <div className=\"array-container\">\n      {array.map((item, index) => (\n        <div className=\"array-item\" key={index}>\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\ninterface MergedArrayItemProps {\n  mergedArr: number[];\n  displayArray: number[];\n  setDisplayArray: React.Dispatch<React.SetStateAction<number[]>>;\n  setDisabled: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const MergedArrayItem: React.FC<MergedArrayItemProps> = ({\n  mergedArr,\n  displayArray,\n  setDisplayArray,\n  setDisabled,\n}) => {\n  const delay = (ms: number) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(0);\n      }, ms);\n    });\n  };\n  useEffect(() => {\n    (async () => {\n      for (let el of mergedArr) {\n        await delay(200);\n        setDisplayArray((arr: number[]) => [...arr, el]);\n      }\n      setDisabled(false);\n    })();\n  }, [mergedArr, setDisplayArray, setDisabled]);\n  return (\n    <div className=\"merged-array-container\">\n      {displayArray.map((item, index) => (\n        <div className=\"array-item\" key={index}>\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { createRandomArrayForMerge } from \"../../utils/utils\";\nimport \"./MergingVisualizer.css\";\nimport {\n  mergeInSortedOrder,\n  mergeInSortedOrderWithNoDuplicate,\n} from \"../../algorithms/MergingSortedArrays\";\nimport { ArrayItem } from \"./ArrayItem\";\nimport { MergedArrayItem } from \"./MergedArrayItem\";\n\nexport const MergingVisualizer: React.FC = () => {\n  const [arrayOne, setArrayOne] = useState<number[]>([]);\n  const [arrayTwo, setArrayTwo] = useState<number[]>([]);\n  const [mergedArray, setMergedArray] = useState<number[]>([]);\n  const [displayArray, setDisplayArray] = useState<number[]>([]);\n  const [disabled, setDisabled] = useState<boolean>(false);\n\n  useEffect(() => {\n    setArrayOne(createRandomArrayForMerge);\n    setArrayTwo(createRandomArrayForMerge);\n  }, []);\n\n  const mergeArray = () => {\n    setDisabled(!disabled);\n    setMergedArray([]);\n    setDisplayArray([]);\n    setMergedArray(mergeInSortedOrder(arrayOne, arrayTwo));\n  };\n  const mergeArrayNoDuplicates = () => {\n    setDisabled(!disabled);\n    setMergedArray([]);\n    setDisplayArray([]);\n    setMergedArray(mergeInSortedOrderWithNoDuplicate(arrayOne, arrayTwo));\n  };\n\n  return (\n    <div className=\"merging-container\">\n      <div className=\"array-one\">Array One: </div>\n      <div className=\"array-one-items\">\n        <ArrayItem array={arrayOne} />\n      </div>\n      <div className=\"array-two\">Array Two: </div>\n      <div className=\"array-two-items\">\n        <ArrayItem array={arrayTwo} />\n      </div>\n      <div className=\"merged-array\">Merged Array: </div>\n      <div className=\"merged-array-items\">\n        <MergedArrayItem\n          mergedArr={mergedArray}\n          displayArray={displayArray}\n          setDisplayArray={setDisplayArray}\n          setDisabled={setDisabled}\n        />\n      </div>\n      <div className=\"btn-merge\">\n        <button\n          onClick={() => {\n            setArrayOne(createRandomArrayForMerge);\n            setArrayTwo(createRandomArrayForMerge);\n            setMergedArray([]);\n            setDisplayArray([]);\n          }}\n        >\n          New Array\n        </button>\n        <button onClick={() => mergeArray()} disabled={disabled}>\n          Merge\n        </button>\n        <button onClick={() => mergeArrayNoDuplicates()} disabled={disabled}>\n          Merge with no Dupes\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const mergeInSortedOrder = (arr1: number[], arr2: number[]) =>{\n    let temp = [];\n    let i = 0, j = 0, curr = 0;\n    while(curr < (arr1.length + arr2.length)){\n        let isArr1Depleted = i >= arr1.length;\n        let isArr2Depleted = j >= arr2.length;\n        if(!isArr1Depleted && (isArr2Depleted || (arr1[i] < arr2[j]))){\n            temp[curr] = arr1[i];\n            i++;\n        }else{\n            temp[curr] = arr2[j];\n            j++;\n        }\n        curr++;\n    }\n    return temp;\n}\n\nexport const mergeInSortedOrderWithNoDuplicate = (arr1:number[],arr2:number[] ) =>{\n    let temp: number[] = [];\n    let i = 0, j = 0, curr = 0;\n    while(curr < (arr1.length + arr2.length)){\n        let isArr1Depleted = i >= arr1.length;\n        let isArr2Depleted = j >= arr2.length;\n        if(!isArr1Depleted && (isArr2Depleted || arr1[i] === arr2[j])){\n            temp[curr] = arr1[i];\n            i++;\n            j++;\n        }\n        else if(!isArr1Depleted && (isArr2Depleted || arr1[i] < arr2[j])){\n            temp[curr] = arr1[i];\n            i++;\n        }else{\n            temp[curr] = arr2[j];\n            j++;\n        }\n        if(temp[curr] === temp[curr-1]){\n            temp.pop();\n            curr--;\n        }\n        if(temp[curr] === undefined){\n            temp.pop();\n            break;\n        }\n        curr++;\n    }\n    return temp;\n}","export const getQuickSortAnimations = (arr: number[])=>{\n    const animations: any = [];\n    if(arr.length <=1) return arr;\n    quickSort(arr, 0, arr.length-1, animations);\n    return animations;\n}\n\nconst swap = (arr: number[], low: number, high: number)=>{\n    let temp = arr[low];\n    arr[low] = arr[high];\n    arr[high] = temp;\n}\n\nconst partition = (arr: number[], low: number, high: number, animations: any) =>{\n    let pivot = arr[Math.floor((low + high)/2)];\n    let i = low;\n    let j = high;\n   while (i <= j){\n       while(arr[i] < pivot){\n           i++;\n       }\n       while(arr[j] > pivot){\n           j--;\n       }\n       if(i <= j){\n           swap(arr, i, j);\n           animations.push([i, arr[i]])\n           animations.push([j, arr[j]])\n           i++;\n           j--;\n       }\n   }\n   return i;\n}\n\nconst quickSort = (arr: number[], low: number, high: number, animations: any) =>{\n    let index;\n    if(arr.length > 1){\n        index = partition(arr, low, high, animations);\n        if(low < index-1){\n            quickSort(arr, low, index-1, animations);\n        }\n        if(index < high){\n            quickSort(arr, index, high, animations);\n        }\n    }\n    return arr;\n}\n\nconst partitionForTest = (arr: number[], low: number, high: number) =>{\n    let pivot = arr[Math.floor((low + high)/2)];\n    let i = low;\n    let j = high;\n   while (i <= j){\n       while(arr[i] < pivot){\n           i++;\n       }\n       while(arr[j] > pivot){\n           j--;\n       }\n       if(i <= j){\n           swap(arr, i, j);\n           i++;\n           j--;\n       }\n   }\n   return i;\n}\nexport const quickSortForTest = (arr: number[], low: number, high: number) =>{\n    let index;\n    if(arr.length > 1){\n        index = partitionForTest(arr, low, high);\n        if(low < index-1){\n            quickSortForTest(arr, low, index-1);\n        }\n        if(index < high){\n            quickSortForTest(arr, index, high);\n        }\n    }\n    return arr;\n}\n","import React from \"react\";\nimport { CreateRandomArrayForSort } from \"../../utils/utils\";\nimport \"./SortVisualizer.css\";\ninterface SortingItemProps {\n  array: number[];\n  setArray: React.Dispatch<React.SetStateAction<number[]>>;\n  sort: () => void;\n  sortName: string;\n}\n\nexport const SortVisualizer: React.FC<SortingItemProps> = ({\n  array,\n  setArray,\n  sort,\n  sortName,\n}) => {\n  return (\n    <div className=\"sorting-container\">\n      <div className=\"array-bar-container\">\n        <div className=\"array-bar-items\">\n          {array.map((value: number, index: number) => (\n            <div\n              className=\"array-bar\"\n              key={index}\n              style={{\n                backgroundColor: \"red\",\n                height: `${value}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </div>\n      <div className=\"btn-sort\">\n        <button\n          disabled={false}\n          onClick={() => {\n            setArray(CreateRandomArrayForSort);\n          }}\n        >\n          New Array\n        </button>\n        <button\n          disabled={false}\n          onClick={() => {\n            sort();\n          }}\n        >\n          {sortName}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { CreateRandomArrayForSort, sortAnimation } from \"../../utils/utils\";\nimport { getQuickSortAnimations } from \"../../algorithms/QuickSort\";\nimport { SortVisualizer } from \"./SortVisualizer\";\n\nexport const QuickSort: React.FC = () => {\n  const [array, setArray] = useState<number[]>([]);\n\n  useEffect(() => {\n    setArray(CreateRandomArrayForSort);\n  }, []);\n\n  const quickSort = () => {\n    const animations = getQuickSortAnimations(array);\n    sortAnimation(animations);\n  };\n\n  return (\n    <SortVisualizer\n      array={array}\n      setArray={setArray}\n      sort={quickSort}\n      sortName=\"Quick Sort\"\n    />\n  );\n};\n","//credits to Clement Mihailescu\n//https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial\n\n\n\nexport const getMergeSortAnimations = (arr: number[]) =>{\n    const animations: any = [];\n    if(arr.length <=1) return arr;\n    const auxArr = arr.slice();\n    mergeSortHelper(arr, 0, arr.length-1, auxArr, animations);\n    return animations;\n}\n\nconst mergeSortHelper = (arr: number[], start: number, end: number, auxArr: number[], animations: any) =>{\n    if(start === end) return;\n    const middle = Math.floor((start + end)/2);\n    mergeSortHelper(auxArr, start, middle, arr, animations);\n    mergeSortHelper(auxArr, middle+1, end, arr, animations);\n    mergeSort(arr, start, middle, end, auxArr, animations);\n}\n\nconst mergeSort = (arr:number[], start: number, middle: number, end: number, auxArr: number[], animations: any) =>{\n    let k = start;\n    let i = start;\n    let j = middle + 1;\n\n    while(i <= middle && j <= end){\n        if(auxArr[i] <= auxArr[j]){\n            animations.push([k, auxArr[i]]);\n            arr[k++] = auxArr[i++];\n        }else{\n            animations.push([k, auxArr[j]]);\n            arr[k++] = auxArr[j++];\n        }\n    }\n    while (i <= middle){\n        animations.push([k, auxArr[i]]);\n        arr[k++] = auxArr[i++];\n    }\n    while(j <= end){\n        animations.push([k, auxArr[j]]);\n        arr[k++] = auxArr[j++];\n    }\n}\n\nexport const mergeSortHelperForTest = (arr: number[], start: number, end: number, auxArr: number[]) =>{\n    if(start === end) return;\n    const middle = Math.floor((start + end)/2);\n    mergeSortHelperForTest(auxArr, start, middle, arr);\n    mergeSortHelperForTest(auxArr, middle+1, end, arr);\n    mergeSortForTest(arr, start, middle, end, auxArr);\n    return arr;\n}\n\nconst mergeSortForTest = (arr:number[], start: number, middle: number, end: number, auxArr: number[]) =>{\n    let k = start;\n    let i = start;\n    let j = middle + 1;\n\n    while(i <= middle && j <= end){\n        if(auxArr[i] <= auxArr[j]){\n            arr[k++] = auxArr[i++];\n        }else{\n            arr[k++] = auxArr[j++];\n        }\n    }\n    while (i <= middle){\n        arr[k++] = auxArr[i++];\n    }\n    while(j <= end){\n        arr[k++] = auxArr[j++];\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { CreateRandomArrayForSort, sortAnimation } from \"../../utils/utils\";\nimport { getMergeSortAnimations } from \"../../algorithms/MergeSort\";\nimport { SortVisualizer } from \"./SortVisualizer\";\n\nexport const MergeSort: React.FC = () => {\n  const [array, setArray] = useState<number[]>([]);\n\n  useEffect(() => {\n    setArray(CreateRandomArrayForSort);\n  }, []);\n\n  const mergeSort = () => {\n    const animations = getMergeSortAnimations(array);\n    sortAnimation(animations);\n  };\n\n  return (\n    <SortVisualizer\n      array={array}\n      setArray={setArray}\n      sort={mergeSort}\n      sortName=\"Merge Sort\"\n    />\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nexport const Header: React.FC = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link className=\"quicksort\" to=\"/quicksort\">\n            Quick Sort\n          </Link>\n        </li>\n        <li>\n          <Link className=\"mergesort\" to=\"/mergesort\">\n            Merge Sort\n          </Link>\n        </li>\n        <li>\n          <Link className=\"insertsort\" to=\"/insertsort\">\n            Insertion Sort\n          </Link>\n        </li>\n        <li>\n          <Link className=\"radixsort\" to=\"/radixsort\">\n            Radix Sort\n          </Link>\n        </li>\n        <li>\n          <Link className=\"merge\" to=\"/merge\">\n            Merge Two Sorted Arrays\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","export const getInsertionSortAnimation = (arr:number[]) =>{\n    const animations: any = [];\n    if(arr.length <=1) return arr;\n    insertionSort(arr, animations);\n    return animations;\n}\n// export const getInsertionSortAnimation = (arr:number[])=>{\n//     return insertionSort(arr);\n// }\nconst insertionSort = (arr: number[], animations: any)=>{\n    let n = arr.length;\n    for(let i = 1; i < n; i++){\n        let curr = arr[i];\n        let j = i-1;\n        while(j>-1 && curr < arr[j]){\n            arr[j+1] = arr[j];\n            animations.push([j+1, arr[j]])\n            j--;\n        }\n        arr[j+1] = curr;\n        animations.push([j+1, curr])\n    }\n    return arr;\n}\n\nexport const insertionSortForTest = (arr: number[])=>{\n    let n = arr.length;\n    for(let i = 1; i < n; i++){\n        let curr = arr[i];\n        let j = i-1;\n        while(j>-1 && curr < arr[j]){\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = curr;\n    }\n    return arr;\n}","import React, { useState, useEffect } from \"react\";\nimport { getInsertionSortAnimation } from \"../../algorithms/InsertionSort\";\nimport { CreateRandomArrayForSort, sortAnimation } from \"../../utils/utils\";\nimport { SortVisualizer } from \"./SortVisualizer\";\n\nexport const InsertionSort: React.FC = () => {\n  const [array, setArray] = useState<number[]>([]);\n\n  useEffect(() => {\n    setArray(CreateRandomArrayForSort);\n  }, []);\n\n  const insertionSort = () => {\n    const animations = getInsertionSortAnimation(array);\n    sortAnimation(animations);\n  };\n\n  return (\n    <SortVisualizer\n      array={array}\n      setArray={setArray}\n      sort={insertionSort}\n      sortName=\"Insertion Sort\"\n    />\n  );\n};\n","export const getRadixSortAnimations = (arr: number[]) =>{\n    const animations: any = [];\n    if(arr.length<=1) return arr;\n    radixSort(arr, animations);\n    return animations;\n}\n\nconst getNum = (num: number, index: number)=>{\n    const strNum = String(num);\n    let end = strNum.length-1;\n    const foundNum = strNum[end - index];\n    if(foundNum === undefined) return 0;\n    else return foundNum;\n}\n\nconst largestNum = (arr: number[]) =>{\n    let largest = '0';\n    arr.forEach(num =>{\n        const strNum = String(num);\n        if(strNum.length > largest.length) largest = strNum;\n    });\n    return largest.length;\n}\n\nconst radixSort = (arr: number[], animations: any)=>{\n    let maxLength=largestNum(arr);\n    for(let i = 0; i < maxLength+1; i++){\n        let buckets: any[] = Array.from({length: 10}, ()=>[]);\n        for(let j = 0; j < arr.length; j++){\n            let num: any = getNum(arr[j], i);\n            console.log(num);\n            if(num !== undefined){\n                buckets[num].push(arr[j]);\n                animations.push([j, arr[j]])\n            }\n        };\n        arr = buckets.flat();\n    }\n    return arr;\n}\n\nexport const radixSortForTest = (arr: number[])=>{\n    let maxLength=largestNum(arr);\n    for(let i = 0; i < maxLength+1; i++){\n        let buckets: any[] = Array.from({length: 10}, ()=>[]);\n        for(let j = 0; j < arr.length; j++){\n            let num: any = getNum(arr[j], i);\n            if(num !== undefined) buckets[num].push(arr[j]);\n        };\n        arr = buckets.flat();\n    }\n    return arr;\n}","import React, { useEffect, useState } from \"react\";\nimport { getRadixSortAnimations } from \"../../algorithms/radixSort\";\nimport { SortVisualizer } from \"./SortVisualizer\";\nimport { CreateRandomArrayForSort, sortAnimation } from \"../../utils/utils\";\n\nexport const RadixSort: React.FC = () => {\n  const [array, setArray] = useState<number[]>([]);\n\n  useEffect(() => {\n    setArray(CreateRandomArrayForSort);\n  }, []);\n\n  const radixSort = () => {\n    const animations = getRadixSortAnimations(array);\n    sortAnimation(animations);\n  };\n  return (\n    <SortVisualizer\n      array={array}\n      setArray={setArray}\n      sort={radixSort}\n      sortName=\"Radix Sort\"\n    />\n  );\n};\n","import React from \"react\";\nimport { MergingVisualizer } from \"./components/MergingVisualizer/MergingVisualizer\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { QuickSort } from \"./components/SortingVisualizer/QuickSort\";\nimport { MergeSort } from \"./components/SortingVisualizer/MergeSort\";\nimport { Header } from \"./components/Header/Header\";\nimport { InsertionSort } from \"./components/SortingVisualizer/InsertionSort\";\nimport { RadixSort } from \"./components/SortingVisualizer/RadixSort\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={QuickSort} />\n          <Route exact path=\"/quicksort\" component={QuickSort} />\n          <Route exact path=\"/mergesort\" component={MergeSort} />\n          <Route exact path=\"/insertsort\" component={InsertionSort} />\n          <Route exact path=\"/radixsort\" component={RadixSort} />\n          <Route exact path=\"/merge\" component={MergingVisualizer} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}